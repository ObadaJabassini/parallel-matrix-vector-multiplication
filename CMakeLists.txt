cmake_minimum_required(VERSION 3.6)
set(CMAKE_C_COMPILER mpicc)
set(CMAKE_CXX_COMPILER mpic++)
set(GCC_THREAD_COMPILE_FLAGS "-pthread")
set(CMAKE_SHARED_LINKER_FLAGS "-lqwt-qt5")
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS} ${GCC_THREAD_COMPILE_FLAGS}")
set(SOURCE_FILES /home/ojabassini/qcustomplot/qcustomplot.h /home/ojabassini/qcustomplot/qcustomplot.cpp source/main.cpp source/RandomGenerator/RandomGenerator.cpp source/RandomGenerator/NormalRandomGenerator.cpp source/RandomGenerator/UniformRandomGenerator.cpp source/DataHandler/DataReader.cpp source/DataHandler/ResultDataWriter.cpp source/DataHandler/TextDataReader.cpp source/DataHandler/ResultTextDataWriter.cpp source/Serial/MatrixMultiplier.cpp source/Pvm/SingleRowMultiplier.cpp source/Serial/SerialMatrixMultiplier.cpp source/Pvm/SingleColumnMultiplier.cpp source/Pvm/MultipleRowMultiplier.cpp source/DataHandler/RandomDataWriter.cpp source/Performance/Benchmarker.cpp source/Pvm/MultipleColumnMultiplier.cpp source/Mpi/SingleRowMultiplier.cpp source/Mpi/SingleColumnMultiplier.cpp source/Mpi/MultipleRowMultiplier.cpp source/Mpi/MultipleColumnMultiplier.cpp source/Performance/ResultWriter.cpp include/DataHandler/DataReader.h include/DataHandler/ResultDataWriter.h include/DataHandler/TextDataReader.h include/DataHandler/ResultTextDataWriter.h include/DataHandler/RandomDataWriter.h include/RandomGenerator/RandomGenerator.h include/RandomGenerator/UniformRandomGenerator.h include/RandomGenerator/NormalRandomGenerator.h include/Performance/Benchmarker.h include/Performance/ResultWriter.h include/Pvm/MultipleColumnMultiplier.h include/Pvm/SingleColumnMultiplier.h include/Pvm/SingleRowMultiplier.h include/Pvm/MultipleRowMultiplier.h include/Mpi/MultipleColumnMultiplier.h include/Mpi/SingleColumnMultiplier.h include/Mpi/SingleRowMultiplier.h include/Mpi/MultipleRowMultiplier.h include/Serial/MatrixMultiplier.h include/Serial/SerialMatrixMultiplier.h include/Ui/mainwindow.h source/mainwindow.cpp include/DataHandler/DataWriter.h include/DataHandler/TextDataWriter.h source/DataHandler/TextDataWriter.cpp include/Ui/insertdialog.h include/Ui/offsetdialog.h source/offsetdialog.cpp source/insertdialog.cpp include/RandomGenerator/ExponentialRandomGenerator.h source/RandomGenerator/ExponentialRandomGenerator.cpp include/Ui/exponentialdialog.h include/Ui/normaldialog.h include/Ui/uniformdialog.h source/normaldialog.cpp source/uniformdialog.cpp source/exponentialdialog.cpp source/RandomGenerator/RubbishRandomGenerator.cpp include/RandomGenerator/RubbishRandomGenerator.h include/Pvm/SingleColumnMultiplierSecond.h source/Pvm/SingleColumnMultiplierSecond.cpp include/Mpi/SingleColumnMultiplierSecond.h source/Mpi/SingleColumnMultiplierSecond.cpp include/ThirdParty/pugiconfig.hpp include/ThirdParty/pugixml.hpp source/ThirdParty/pugixml.cpp include/DataHandler/ResultXmlDataWriter.h source/DataHandler/ResultXmlDataWriter.cpp)
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
project(Project)
add_executable(Project ${SOURCE_FILES})
add_definitions(${Qt5Widgets_DEFINITIONS})
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Core REQUIRED)
find_package(Qt5Gui REQUIRED)
find_package(Qt5PrintSupport REQUIRED)
include_directories("${PROJECT_SOURCE_DIR}/include")
include_directories("/home/ojabassini/openmpi/include")
include_directories("/home/ojabassini/qcustomplot")
target_link_libraries(Project libpvm3.a)
target_link_libraries(Project libgpvm3.a)
target_link_libraries(Project Qt5::Widgets Qt5::Core Qt5::Gui Qt5::PrintSupport)
file(GLOB APP_SOURCES source/Pvm/private/*.cpp source/Mpi/private/*.cpp)
foreach (testsourcefile ${APP_SOURCES})
    get_filename_component(testname ${testsourcefile} NAME_WE)
    add_executable(${testname} ${testsourcefile} source/DataHandler/DataReader.cpp source/DataHandler/ResultDataWriter.cpp source/DataHandler/ResultTextDataWriter.cpp source/DataHandler/TextDataReader.cpp)
    include_directories("${PROJECT_SOURCE_DIR}/include")
    target_link_libraries(${testname} libpvm3.a)
    target_link_libraries(${testname} libgpvm3.a)
endforeach (testsourcefile ${APP_SOURCES})